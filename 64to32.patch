
project build/
diff --git a/core/definitions.mk b/core/definitions.mk
index b661c7d..8f4b033 100644
--- a/core/definitions.mk
+++ b/core/definitions.mk
@@ -1551,7 +1551,7 @@ define transform-classes.jar-to-dex
 @echo "target Dex: $(PRIVATE_MODULE)"
 @mkdir -p $(dir $@)
 $(hide) $(DX) \
-    $(if $(findstring windows,$(HOST_OS)),,-JXms16M -JXmx2048M) \
+    $(if $(findstring windows,$(HOST_OS)),,-JXms16M -JXmx1024M) \
     --dex --output=$@ \
     $(incremental_dex) \
     $(if $(NO_OPTIMIZE_DX), \

project external/oprofile/
diff --git a/common.mk b/common.mk
index f5578b1..e45e16f 100644
--- a/common.mk
+++ b/common.mk
@@ -46,7 +46,7 @@ common_host_cflags += -DMISSING_MREMAP
 common_host_ldlibs_libiconv := -liconv
 else
 ifeq ($(HOST_OS)-$(HOST_ARCH),linux-x86)
-HAVE_LIBBFD := true
+HAVE_LIBBFD := false
 endif
 endif
 

project external/qemu/
diff --git a/Makefile.common b/Makefile.common
index f9d98af..0ce5a5f 100644
--- a/Makefile.common
+++ b/Makefile.common
@@ -143,15 +143,15 @@ $(call end-emulator-library)
 #  1) For Windows: amd64-mingw32msvc-gcc doesn't work, see http://b/issue?id=5949152.
 #  2) For MacOSX: 64-bit libSDL*.a 1.2.x depends on NSQuickDrawView doesn't exist
 #  3) Standalone has --try-64
-ifeq ($(HOST_OS),linux)
-  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
-    $(call start-emulator-library, emulator64-common)
-    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
-    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
-    $(call gen-hw-config-defs)
-    $(call end-emulator-library)
-  endif # BUILD_STANDALONE_EMULATOR == nil
-endif # HOST_OS == linux
+#ifeq ($(HOST_OS),linux)
+#  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
+#    $(call start-emulator-library, emulator64-common)
+#    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
+#    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
+#    $(call gen-hw-config-defs)
+#    $(call end-emulator-library)
+#  endif # BUILD_STANDALONE_EMULATOR == nil
+#endif # HOST_OS == linux
 
 ##############################################################################
 ##############################################################################
@@ -294,15 +294,15 @@ $(call end-emulator-library)
 
 
 ## another for 64-bit, see note in emulator64-common
-ifeq ($(HOST_OS),linux)
-  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
-    $(call start-emulator-library, emulator64-libui)
-    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
-    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
-    $(call gen-hw-config-defs)
-    $(call end-emulator-library)
-  endif # BUILD_STANDALONE_EMULATOR == nil
-endif # HOST_OS == linux
+#ifeq ($(HOST_OS),linux)
+#  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
+#    $(call start-emulator-library, emulator64-libui)
+#    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
+#    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
+#    $(call gen-hw-config-defs)
+#    $(call end-emulator-library)
+#  endif # BUILD_STANDALONE_EMULATOR == nil
+#endif # HOST_OS == linux
 
 
 ##############################################################################
@@ -619,27 +619,27 @@ $(call end-emulator-library)
 
 
 ## another for 64-bit, see note in emulator64-common
-ifeq ($(HOST_OS),linux)
-  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
-    $(call start-emulator-library, emulator64-libqemu)
-    # gdbstub-xml.c contains C-compilable arrays corresponding to the content
-    # of $(LOCAL_PATH)/gdb-xml/, and is generated with the 'feature_to_c.sh' script.
-    #
-    intermediates = $(call intermediates-dir-for,STATIC_LIBRARIES,$(LOCAL_MODULE),true)
-    QEMU_GDBSTUB_XML_C = $(intermediates)/gdbstub-xml.c
-    $(QEMU_GDBSTUB_XML_C): PRIVATE_PATH := $(LOCAL_PATH)
-    $(QEMU_GDBSTUB_XML_C): PRIVATE_SOURCES := $(TARGET_XML_SOURCES)
-    $(QEMU_GDBSTUB_XML_C): PRIVATE_CUSTOM_TOOL = $(PRIVATE_PATH)/feature_to_c.sh $@ $(QEMU_TARGET_XML_SOURCES)
-    $(QEMU_GDBSTUB_XML_C): $(QEMU_TARGET_XML_SOURCES) $(LOCAL_PATH)/feature_to_c.sh
- $(hide) rm -f $@
-	$(transform-generated-source)
-    LOCAL_GENERATED_SOURCES += $(QEMU_GDBSTUB_XML_C)
-    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -I$(intermediates) -m64
-    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
-    $(call gen-hw-config-defs)
-    $(call end-emulator-library)
-  endif # BUILD_STANDALONE_EMULATOR == nil
-endif # HOST_OS == linux
+#ifeq ($(HOST_OS),linux)
+#  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
+#    $(call start-emulator-library, emulator64-libqemu)
+#    # gdbstub-xml.c contains C-compilable arrays corresponding to the content
+#    # of $(LOCAL_PATH)/gdb-xml/, and is generated with the 'feature_to_c.sh' script.
+#    #
+#    intermediates = $(call intermediates-dir-for,STATIC_LIBRARIES,$(LOCAL_MODULE),true)
+#    QEMU_GDBSTUB_XML_C = $(intermediates)/gdbstub-xml.c
+#    $(QEMU_GDBSTUB_XML_C): PRIVATE_PATH := $(LOCAL_PATH)
+#    $(QEMU_GDBSTUB_XML_C): PRIVATE_SOURCES := $(TARGET_XML_SOURCES)
+#    $(QEMU_GDBSTUB_XML_C): PRIVATE_CUSTOM_TOOL = $(PRIVATE_PATH)/feature_to_c.sh $@ $(QEMU_TARGET_XML_SOURCES)
+#    $(QEMU_GDBSTUB_XML_C): $(QEMU_TARGET_XML_SOURCES) $(LOCAL_PATH)/feature_to_c.sh
+#	$(hide) rm -f $@
+#	$(transform-generated-source)
+#    LOCAL_GENERATED_SOURCES += $(QEMU_GDBSTUB_XML_C)
+#    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -I$(intermediates) -m64
+#    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
+#    $(call gen-hw-config-defs)
+#    $(call end-emulator-library)
+#  endif # BUILD_STANDALONE_EMULATOR == nil
+#endif # HOST_OS == linux
 
 
 # Block sources, we must compile them with each executable because they
@@ -713,15 +713,15 @@ $(call end-emulator-library)
 
 
 ## another for 64-bit, see note in emulator64-common
-ifeq ($(HOST_OS),linux)
-  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
-    $(call start-emulator-library, emulator64-libelff)
-    LOCAL_CPP_EXTENSION := .cc
-    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
-    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
-    $(call end-emulator-library)
-  endif # BUILD_STANDALONE_EMULATOR == nil
-endif # HOST_OS == linux
+#ifeq ($(HOST_OS),linux)
+#  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
+#    $(call start-emulator-library, emulator64-libelff)
+#    LOCAL_CPP_EXTENSION := .cc
+#    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
+#    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
+#    $(call end-emulator-library)
+#  endif # BUILD_STANDALONE_EMULATOR == nil
+#endif # HOST_OS == linux
 
 
 ##############################################################################
diff --git a/Makefile.target b/Makefile.target
index 1961acf..582c72d 100644
--- a/Makefile.target
+++ b/Makefile.target
@@ -246,16 +246,16 @@ $(call gen-hx-header,qemu-options.hx,qemu-options.def,os-posix.c os-win32.c)
 $(call end-emulator-library)
 
 ## another for 64-bit, see note in file Makefile.common emulator64-common
-ifeq ($(HOST_OS),linux)
-  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
-    $(call start-emulator-library, emulator64-target-$(EMULATOR_TARGET_CPU))
-    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
-    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
-    $(call gen-hw-config-defs)
-    $(call gen-hx-header,qemu-options.hx,qemu-options.def,os-posix.c os-win32.c)
-    $(call end-emulator-library)
-  endif # BUILD_STANDALONE_EMULATOR == nil
-endif # HOST_OS == linux
+#ifeq ($(HOST_OS),linux)
+#  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
+#    $(call start-emulator-library, emulator64-target-$(EMULATOR_TARGET_CPU))
+#    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
+#    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
+#    $(call gen-hw-config-defs)
+#    $(call gen-hx-header,qemu-options.hx,qemu-options.def,os-posix.c os-win32.c)
+#    $(call end-emulator-library)
+#  endif # BUILD_STANDALONE_EMULATOR == nil
+#endif # HOST_OS == linux
 
 
 
@@ -433,22 +433,22 @@ $(call end-emulator-program)
 
 
 ## another for 64-bit, see note in file Makefile.common emulator64-common
-ifeq ($(HOST_OS),linux)
-  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
-    $(call start-emulator-program, emulator64-$(EMULATOR_TARGET_ARCH))
-    LOCAL_STATIC_LIBRARIES += \
-        emulator64-libui \
-        emulator64-libqemu \
-        emulator64-target-$(EMULATOR_TARGET_CPU) \
-        emulator64-libelff \
-        emulator64-common \
-        $(SDL_STATIC_LIBRARIES_64)
-    LOCAL_LDLIBS += $(common_LOCAL_LDLIBS) -m64
-    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
-    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
-    $(call gen-hx-header,qemu-monitor.hx,qemu-monitor.h,monitor.c)
-    $(call gen-hx-header,qemu-options.hx,qemu-options.def,vl-android.c qemu-options.h)
-    $(call gen-hw-config-defs)
-    $(call end-emulator-program)
-  endif # BUILD_STANDALONE_EMULATOR == nil
-endif # HOST_OS == linux
+#ifeq ($(HOST_OS),linux)
+#  ifneq ($(BUILD_STANDALONE_EMULATOR),true)
+#    $(call start-emulator-program, emulator64-$(EMULATOR_TARGET_ARCH))
+#    LOCAL_STATIC_LIBRARIES += \
+#        emulator64-libui \
+#        emulator64-libqemu \
+#        emulator64-target-$(EMULATOR_TARGET_CPU) \
+#        emulator64-libelff \
+#        emulator64-common \
+#        $(SDL_STATIC_LIBRARIES_64)
+#    LOCAL_LDLIBS += $(common_LOCAL_LDLIBS) -m64
+#    LOCAL_CFLAGS += $(common_LOCAL_CFLAGS) -m64
+#    LOCAL_SRC_FILES += $(common_LOCAL_SRC_FILES)
+#    $(call gen-hx-header,qemu-monitor.hx,qemu-monitor.h,monitor.c)
+#    $(call gen-hx-header,qemu-options.hx,qemu-options.def,vl-android.c qemu-options.h)
+#    $(call gen-hw-config-defs)
+#    $(call end-emulator-program)
+#  endif # BUILD_STANDALONE_EMULATOR == nil
+#endif # HOST_OS == linux

project external/wpa_supplicant_8/
diff --git a/src/utils/wpa_debug.c b/src/utils/wpa_debug.c
index a8b9106..4191e84 100644
--- a/src/utils/wpa_debug.c
+++ b/src/utils/wpa_debug.c
@@ -17,7 +17,7 @@ static int wpa_debug_syslog = 0;
 #endif /* CONFIG_DEBUG_SYSLOG */
 
 
-int wpa_debug_level = MSG_INFO;
+int wpa_debug_level = MSG_DEBUG;
 int wpa_debug_show_keys = 0;
 int wpa_debug_timestamp = 0;
 

project frameworks/native/
diff --git a/libs/utils/Android.mk b/libs/utils/Android.mk
index a59d62c..615c49f 100644
--- a/libs/utils/Android.mk
+++ b/libs/utils/Android.mk
@@ -81,24 +81,39 @@ include $(BUILD_HOST_STATIC_LIBRARY)
 
 # For the host, 64-bit
 # =====================================================
-include $(CLEAR_VARS)
-LOCAL_SRC_FILES:= $(commonSources)
-ifeq ($(HOST_OS), linux)
-LOCAL_SRC_FILES += Looper.cpp
-endif
-LOCAL_MODULE:= lib64utils
-LOCAL_STATIC_LIBRARIES := libz
-LOCAL_C_INCLUDES := \
-	external/zlib
-LOCAL_CFLAGS += $(host_commonCflags) -m64
-LOCAL_LDLIBS += $(host_commonLdlibs)
-
-ifeq ($(HOST_OS),windows)
-LOCAL_CC = /usr/bin/amd64-mingw32msvc-gcc
-LOCAL_CXX = /usr/bin/amd64-mingw32msvc-g++
-endif
-
-include $(BUILD_HOST_STATIC_LIBRARY)
+#<<<<<<< Updated upstream
+#include $(CLEAR_VARS)
+#LOCAL_SRC_FILES:= $(commonSources)
+#ifeq ($(HOST_OS), linux)
+#LOCAL_SRC_FILES += Looper.cpp
+#endif
+#LOCAL_MODULE:= lib64utils
+#LOCAL_STATIC_LIBRARIES := libz
+#LOCAL_C_INCLUDES := \
+#	external/zlib
+#LOCAL_CFLAGS += $(host_commonCflags) -m64
+#LOCAL_LDLIBS += $(host_commonLdlibs)
+
+#ifeq ($(HOST_OS),windows)
+#LOCAL_CC = /usr/bin/amd64-mingw32msvc-gcc
+#LOCAL_CXX = /usr/bin/amd64-mingw32msvc-g++
+#endif
+
+#include $(BUILD_HOST_STATIC_LIBRARY)
+#=======
+#include $(CLEAR_VARS)
+#LOCAL_SRC_FILES:= $(commonSources)
+#ifeq ($(HOST_OS), linux)
+#LOCAL_SRC_FILES += Looper.cpp
+#endif
+#LOCAL_MODULE:= lib64utils
+#LOCAL_STATIC_LIBRARIES := libz
+#LOCAL_C_INCLUDES := \
+#	external/zlib
+#LOCAL_CFLAGS += $(host_commonCflags) -m64
+#LOCAL_LDLIBS += $(host_commonLdlibs)
+#include $(BUILD_HOST_STATIC_LIBRARY)
+#>>>>>>> Stashed changes
 
 
 # For the device

[1mproject prebuilts/tools/[m
diff --git a/gcc-sdk/gcc b/gcc-sdk/gcc
index eac1c47..f303645 100755
--- a/gcc-sdk/gcc
+++ b/gcc-sdk/gcc
@@ -20,21 +20,21 @@ suffix_m64=${options##* -m64 }    # suffix after the last -m64
 len_m32=${#suffix_m32}            # length of suffix after the last -m32
 len_m64=${#suffix_m64}            # length of suffix after the last -m64
 
-if [ $len_m32 -ge $len_m64 ] ; then
-  # Choose 64-bit if -m64 only, -m64 appears after -m32, or neither exist (-eq)
-  MY_TOOL=`dirname $0`/${PREFIX64}-${PROGNAME}
-  # Make sure host is running 64-bit OS.
-  # Note that "uname -m" only show host CPU is capable of.  Use the following technique
-  # from ndk/build/core/ndk-common.sh instead
-  file -L "$SHELL" | grep -q "x86[_-]64"
-  if [ $? != 0 ]; then
-    # $SHELL is not a 64-bit executable, so assume our userland is too.
-    echo "ERROR: $MY_TOOL only run on 64-bit linux"
-    exit 1
-  fi
-else
+#if [ $len_m32 -ge $len_m64 ] ; then
+#  # Choose 64-bit if -m64 only, -m64 appears after -m32, or neither exist (-eq)
+#  MY_TOOL=`dirname $0`/${PREFIX64}-${PROGNAME}
+#  # Make sure host is running 64-bit OS.
+#  # Note that "uname -m" only show host CPU is capable of.  Use the following technique
+#  # from ndk/build/core/ndk-common.sh instead
+#  file -L "$SHELL" | grep -q "x86[_-]64"
+#  if [ $? != 0 ]; then
+#    # $SHELL is not a 64-bit executable, so assume our userland is too.
+#    echo "ERROR: $MY_TOOL only run on 64-bit linux"
+#    exit 1
+#  fi
+#else
   # Otherwise, choose 32-bit
   MY_TOOL=`dirname $0`/${PREFIX32}-${PROGNAME}
-fi
+#fi
 
 $MY_TOOL "$@"

[1mproject sdk/[m
diff --git a/emulator/opengl/shared/OpenglOsUtils/Android.mk b/emulator/opengl/shared/OpenglOsUtils/Android.mk
index 3d9eda8..1e11c65 100644
--- a/emulator/opengl/shared/OpenglOsUtils/Android.mk
+++ b/emulator/opengl/shared/OpenglOsUtils/Android.mk
@@ -48,12 +48,12 @@ $(call emugl-begin-host-static-library,libOpenglOsUtils)
     $(call emugl-export,LDLIBS,$(host_common_LDLIBS))
 $(call emugl-end-module)
 
-### 64-bit host library ####
-$(call emugl-begin-host-static-library,lib64OpenglOsUtils)
-    $(call emugl-export,C_INCLUDES,$(LOCAL_PATH))
-    LOCAL_SRC_FILES = $(host_common_SRC_FILES)
-    $(call emugl-export,LDLIBS,$(host_common_LDLIBS))
-    $(call emugl-export,CFLAGS,-m64)
+#### 64-bit host library ####
+#$(call emugl-begin-host-static-library,lib64OpenglOsUtils)
+#    $(call emugl-export,C_INCLUDES,$(LOCAL_PATH))
+#    LOCAL_SRC_FILES = $(host_common_SRC_FILES)
+#    $(call emugl-export,LDLIBS,$(host_common_LDLIBS))
+#    $(call emugl-export,CFLAGS,-m64)
 
 ifeq ($(HOST_OS),windows)
 LOCAL_CC = /usr/bin/amd64-mingw32msvc-gcc 

[1mproject system/core/[m
diff --git a/libcutils/Android.mk b/libcutils/Android.mk
index c8d8e92..4127e7c 100644
--- a/libcutils/Android.mk
+++ b/libcutils/Android.mk
@@ -97,20 +97,30 @@ include $(BUILD_HOST_STATIC_LIBRARY)
 
 # Static library for host, 64-bit
 # ========================================================
-include $(CLEAR_VARS)
-LOCAL_MODULE := lib64cutils
-LOCAL_SRC_FILES := $(commonSources) $(commonHostSources) dlmalloc_stubs.c
-LOCAL_LDLIBS := -lpthread
-LOCAL_STATIC_LIBRARIES := lib64log
-ifeq ($(HOST_OS),linux)
-LOCAL_CFLAGS += $(hostSmpFlag) -m64 -Dlinux
-endif
-ifeq ($(HOST_OS),windows)
-LOCAL_CC = /usr/bin/amd64-mingw32msvc-gcc 
-LOCAL_CXX = /usr/bin/amd64-mingw32msvc-g++
-LOCAL_CFLAGS += $(hostSmpFlag) -m64
-endif
-include $(BUILD_HOST_STATIC_LIBRARY)
+#<<<<<<< Updated upstream
+#include $(CLEAR_VARS)
+#LOCAL_MODULE := lib64cutils
+#LOCAL_SRC_FILES := $(commonSources) $(commonHostSources) dlmalloc_stubs.c
+#LOCAL_LDLIBS := -lpthread
+#LOCAL_STATIC_LIBRARIES := lib64log
+#ifeq ($(HOST_OS),linux)
+#LOCAL_CFLAGS += $(hostSmpFlag) -m64 -Dlinux
+#endif
+#ifeq ($(HOST_OS),windows)
+#LOCAL_CC = /usr/bin/amd64-mingw32msvc-gcc 
+#LOCAL_CXX = /usr/bin/amd64-mingw32msvc-g++
+#LOCAL_CFLAGS += $(hostSmpFlag) -m64
+#endif
+#include $(BUILD_HOST_STATIC_LIBRARY)
+#=======
+#include $(CLEAR_VARS)
+#LOCAL_MODULE := lib64cutils
+#LOCAL_SRC_FILES := $(commonSources) $(commonHostSources) dlmalloc_stubs.c
+#LOCAL_LDLIBS := -lpthread
+#LOCAL_STATIC_LIBRARIES := lib64log
+#LOCAL_CFLAGS += $(hostSmpFlag) -m64
+#include $(BUILD_HOST_STATIC_LIBRARY)
+#>>>>>>> Stashed changes
 
 
 # Shared and static library for target
diff --git a/liblog/Android.mk b/liblog/Android.mk
index 6ffde0e..1013e81 100644
--- a/liblog/Android.mk
+++ b/liblog/Android.mk
@@ -57,16 +57,25 @@ include $(BUILD_HOST_SHARED_LIBRARY)
 
 # Static library for host, 64-bit
 # ========================================================
-include $(CLEAR_VARS)
-LOCAL_MODULE := lib64log
-LOCAL_SRC_FILES := $(liblog_host_sources)
-LOCAL_LDLIBS := -lpthread
-LOCAL_CFLAGS := -DFAKE_LOG_DEVICE=1 -m64
-ifeq ($(HOST_OS),windows)
-LOCAL_CC = /usr/bin/amd64-mingw32msvc-gcc 
-LOCAL_CXX = /usr/bin/amd64-mingw32msvc-g++
-endif
-include $(BUILD_HOST_STATIC_LIBRARY)
+#<<<<<<< Updated upstream
+#include $(CLEAR_VARS)
+#LOCAL_MODULE := lib64log
+#LOCAL_SRC_FILES := $(liblog_host_sources)
+#LOCAL_LDLIBS := -lpthread
+#LOCAL_CFLAGS := -DFAKE_LOG_DEVICE=1 -m64
+#ifeq ($(HOST_OS),windows)
+#LOCAL_CC = /usr/bin/amd64-mingw32msvc-gcc 
+#LOCAL_CXX = /usr/bin/amd64-mingw32msvc-g++
+#endif
+#include $(BUILD_HOST_STATIC_LIBRARY)
+#=======
+#include $(CLEAR_VARS)
+#LOCAL_MODULE := lib64log
+#LOCAL_SRC_FILES := $(liblog_host_sources)
+#LOCAL_LDLIBS := -lpthread
+#LOCAL_CFLAGS := -DFAKE_LOG_DEVICE=1 -m64
+#include $(BUILD_HOST_STATIC_LIBRARY)
+#>>>>>>> Stashed changes
 
 
 # Shared and static library for target
